// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
    // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// schema.prisma

model User {
  id                  String              @id @default(uuid())
  username            String              @unique
  email               String              @unique
  password_hash       String
  role                String
  photo_url           String?
  contact_number      String?
  address             String?
  bio                 String?
  date_of_birth       DateTime?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  last_login          DateTime?
  is_active           Boolean             @default(true)
  verification_status String
  token               String? // Champ optionnel, par défaut à null
  trajets             Trajet[]            @relation("UserTrajets")
  commandes           Commande[]          @relation("UserCommandes")
  reponsesConducteur  ReponseConducteur[] @relation("ConducteurReponses")

  // Relations pour les commandes en tant que conducteur
  commandesConducteur Commande[] @relation("ConducteurCommandes")

  // Relation avec le modèle Vehicule
  vehicules Vehicule[] @relation("UserVehicules")

  wallet    Wallet? @relation("UserWallet") // Suppression des attributs fields et references ici
  wallet_id String?

  rechargements Rechargement[] @relation("UserRechargements") // Ajout de la relation inverse ici

  soldes Solde[] @relation("UserSoldes") // Relation ajoutée
}

model Trajet {
  id                  String     @id @default(uuid())
  utilisateur_id      String
  point_depart        Json
  ville_depart        String     @default("ABIDJAN")
  point_arrivee       Json
  ville_arrivee       String     @default("AGBOVILLE")
  temps_depart_prevu  DateTime
  temps_arrivee_prevu DateTime
  duree_estimee       Int
  distance_estimee    Float
  tempsDistance       String?    // Nouveau champ ajouté, optionnel
  etat_trajet         String
  historique_position Json?
  mode_transport      String
  nombre_de_places    Int
  price               Float?
  arrets              Arret[] // Liste non optionnelle, mais peut être vide
  commandes           Commande[] @relation("TrajetCommandes")
  utilisateur         User       @relation("UserTrajets", fields: [utilisateur_id], references: [id])
  vehicule            Vehicule   @relation("TrajetVehicule", fields: [vehicule_id], references: [id])
  vehicule_id         String

  created_at DateTime @default(now()) // Assurez-vous que ce champ est présent
  updated_at DateTime @updatedAt
}

model Commande {
  id                        String    @id @default(uuid())
  numeroCommande            String    @default("DEFAULT_VALUE")
  trajet_id                 String
  utilisateur_id            String
  conducteur_id             String
  point_prise_en_charge     Json?
  point_depose              Json?
  temps_prise_en_charge     DateTime
  temps_depose              DateTime
  statut_commande           String
  montant                   Float?
  mode_paiement             String?
  commentaires_instructions String?
  date_creation             DateTime  @default(now())
  date_modification         DateTime  @updatedAt
  historique_statuts        Json?
  evaluations               Json?
  date_action               DateTime? // Nouveau champ pour la date d'action

  trajet             Trajet              @relation("TrajetCommandes", fields: [trajet_id], references: [id])
  utilisateur        User                @relation("UserCommandes", fields: [utilisateur_id], references: [id])
  conducteur         User                @relation("ConducteurCommandes", fields: [conducteur_id], references: [id])
  reponsesConducteur ReponseConducteur[] @relation("CommandeReponse")
  soldes             Solde[]             @relation("CommandeSoldes") // Relation ajoutée
}

model Arret {
  id                String   @id @default(uuid())
  trajet_id         String
  nom               Json // Champ modifié pour accepter des données JSON
  ville             String   @default("AGBOVILLE")
  date_creation     DateTime @default(now())
  date_modification DateTime @updatedAt
  trajet            Trajet   @relation(fields: [trajet_id], references: [id])
}

model ReponseConducteur {
  id             String   @id @default(uuid())
  commande_id    String
  conducteur_id  String
  temps_reponse  DateTime @default(now())
  statut_reponse String
  commentaires   String?

  commande   Commande @relation("CommandeReponse", fields: [commande_id], references: [id])
  conducteur User     @relation("ConducteurReponses", fields: [conducteur_id], references: [id])
}

model Vehicule {
  id                String   @id @default(uuid())
  utilisateur_id    String
  marque            String
  modele            String
  annee             Int
  plaque            String
  couleur           String?
  permis            String?
  carte_grise       String?
  date_creation     DateTime @default(now())
  date_modification DateTime @updatedAt
  utilisateur       User     @relation("UserVehicules", fields: [utilisateur_id], references: [id])
  trajets           Trajet[] @relation("TrajetVehicule") // Relation inverse avec Trajet
  Image Image[]
}

// schema.prisma
model Contact {
  id        String   @id @default(cuid())
  nom       String
  email     String
  sujet     String
  message   String   @db.Text
  dateEnvoi DateTime @default(now())
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  reponse   String   @db.Text
  dateAjout DateTime @default(now())
}

model PlansTarifaires {
  id             String   @id @default(cuid())
  nom            String // Nom du plan tarifaire
  description    String // Description du plan tarifaire
  prix           Float // Prix du plan tarifaire
  products       String? // Nombre de produits inclus dans le plan
  subscribers    String? // Nombre maximal d'abonnés
  basicAnalytics Boolean // Inclut des analyses de base
  dateCreation   DateTime @default(now()) // Date de création du plan tarifaire
}

model About {
  id                String   @id @default(cuid())
  libelle           String?
  name              String?
  description       String?
  image             String?
  date_creation     DateTime @default(now())
  date_modification DateTime @updatedAt
}

model Wallet {
  id            String         @id @default(uuid())
  user_id       String         @unique
  balance       Decimal        @default(0.0) @db.Decimal(10, 2)
  currency_id   String         @default("FCFA") // Assurez-vous que ce champ est traité comme un champ normal
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  user          User           @relation("UserWallet", fields: [user_id], references: [id])
  rechargements Rechargement[]
}

model Rechargement {
  id             String   @id @default(uuid())
  date           DateTime @default(now())
  description    String
  amount         Decimal  @db.Decimal(10, 2) // Exemple: précision 10, échelle 2
  paymentMethod  String
  status         String
  wallet_id      String
  utilisateur_id String
  wallet         Wallet   @relation(fields: [wallet_id], references: [id])
  utilisateur    User     @relation("UserRechargements", fields: [utilisateur_id], references: [id])
}


model Solde {
  id          String     @id @default(uuid())
  user_id     String
  montant     Decimal    @db.Decimal(10, 2)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  commandeId  String

  user        User       @relation("UserSoldes", fields: [user_id], references: [id])
  commande    Commande   @relation("CommandeSoldes", fields: [commandeId], references: [id])
}

model Image {
  id         String   @id @default(uuid())
  url        String
  vehiculeId String
  vehicule   Vehicule @relation(fields: [vehiculeId], references: [id])
}